"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _head2 = _interopRequireDefault(require("lodash/head"));

var _isArray2 = _interopRequireDefault(require("lodash/isArray"));

var _toString2 = _interopRequireDefault(require("lodash/toString"));

var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _isDate2 = _interopRequireDefault(require("lodash/isDate"));

var _isBoolean2 = _interopRequireDefault(require("lodash/isBoolean"));

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _isNil2 = _interopRequireDefault(require("lodash/isNil"));

var _toNumber2 = _interopRequireDefault(require("lodash/toNumber"));

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _debounce2 = _interopRequireDefault(require("lodash/debounce"));

var _mobx = require("mobx");

var _Base2 = _interopRequireDefault(require("./Base"));

var _utils = require("./utils");

var _parser = require("./parser");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var setupFieldProps = function setupFieldProps(instance, props, data) {
  return Object.assign(instance, {
    $label: props.$label || data && data.label || '',
    $placeholder: props.$placeholder || data && data.placeholder || '',
    $disabled: props.$disabled || data && data.disabled || false,
    $bindings: props.$bindings || data && data.bindings || 'default',
    $related: props.$related || data && data.related || [],
    $validators: (0, _mobx.toJS)(props.$validators || data && data.validators || null),
    $validatedWith: props.$validatedWith || data && data.validatedWith || 'value',
    $rules: props.$rules || data && data.rules || null,
    $observers: props.$observers || data && data.observers || null,
    $interceptors: props.$interceptors || data && data.interceptors || null,
    $extra: props.$extra || data && data.extra || null,
    $options: props.$options || data && data.options || {},
    $hooks: props.$hooks || data && data.hooks || {},
    $handlers: props.$handlers || data && data.handlers || {}
  });
};

var setupDefaultProp = function setupDefaultProp(instance, data, props, update, _ref) {
  var isEmptyArray = _ref.isEmptyArray;
  return (0, _parser.parseInput)(instance.$input, {
    nullable: true,
    isEmptyArray: isEmptyArray,
    type: instance.type,
    unified: update ? (0, _parser.defaultValue)({
      type: instance.type
    }) : data && data["default"],
    separated: props.$default,
    fallback: instance.$initial
  });
};

var Field = /*#__PURE__*/function (_Base) {
  _inherits(Field, _Base);

  var _super = _createSuper(Field);

  function Field(_ref2) {
    var _this;

    var key = _ref2.key,
        path = _ref2.path,
        _ref2$data = _ref2.data,
        data = _ref2$data === void 0 ? {} : _ref2$data,
        _ref2$props = _ref2.props,
        props = _ref2$props === void 0 ? {} : _ref2$props,
        _ref2$update = _ref2.update,
        update = _ref2$update === void 0 ? false : _ref2$update,
        state = _ref2.state;

    _classCallCheck(this, Field);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "fields", _mobx.observable.map ? _mobx.observable.map({}) : (0, _mobx.asMap)({}));

    _defineProperty(_assertThisInitialized(_this), "hasInitialNestedFields", false);

    _defineProperty(_assertThisInitialized(_this), "incremental", false);

    _defineProperty(_assertThisInitialized(_this), "id", void 0);

    _defineProperty(_assertThisInitialized(_this), "key", void 0);

    _defineProperty(_assertThisInitialized(_this), "name", void 0);

    _defineProperty(_assertThisInitialized(_this), "path", void 0);

    _defineProperty(_assertThisInitialized(_this), "state", void 0);

    _defineProperty(_assertThisInitialized(_this), "$observers", void 0);

    _defineProperty(_assertThisInitialized(_this), "$interceptors", void 0);

    _defineProperty(_assertThisInitialized(_this), "$hooks", {});

    _defineProperty(_assertThisInitialized(_this), "$handlers", {});

    _defineProperty(_assertThisInitialized(_this), "$input", function ($) {
      return $;
    });

    _defineProperty(_assertThisInitialized(_this), "$output", function ($) {
      return $;
    });

    _defineProperty(_assertThisInitialized(_this), "$options", void 0);

    _defineProperty(_assertThisInitialized(_this), "$value", void 0);

    _defineProperty(_assertThisInitialized(_this), "$type", void 0);

    _defineProperty(_assertThisInitialized(_this), "$label", void 0);

    _defineProperty(_assertThisInitialized(_this), "$placeholder", void 0);

    _defineProperty(_assertThisInitialized(_this), "$default", void 0);

    _defineProperty(_assertThisInitialized(_this), "$initial", void 0);

    _defineProperty(_assertThisInitialized(_this), "$bindings", void 0);

    _defineProperty(_assertThisInitialized(_this), "$extra", void 0);

    _defineProperty(_assertThisInitialized(_this), "$related", void 0);

    _defineProperty(_assertThisInitialized(_this), "$validatedWith", void 0);

    _defineProperty(_assertThisInitialized(_this), "$validators", void 0);

    _defineProperty(_assertThisInitialized(_this), "$rules", void 0);

    _defineProperty(_assertThisInitialized(_this), "$disabled", false);

    _defineProperty(_assertThisInitialized(_this), "$focused", false);

    _defineProperty(_assertThisInitialized(_this), "$touched", false);

    _defineProperty(_assertThisInitialized(_this), "$changed", false);

    _defineProperty(_assertThisInitialized(_this), "$blurred", false);

    _defineProperty(_assertThisInitialized(_this), "$deleted", false);

    _defineProperty(_assertThisInitialized(_this), "$clearing", false);

    _defineProperty(_assertThisInitialized(_this), "$resetting", false);

    _defineProperty(_assertThisInitialized(_this), "autoFocus", false);

    _defineProperty(_assertThisInitialized(_this), "showError", false);

    _defineProperty(_assertThisInitialized(_this), "errorSync", null);

    _defineProperty(_assertThisInitialized(_this), "errorAsync", null);

    _defineProperty(_assertThisInitialized(_this), "validationErrorStack", []);

    _defineProperty(_assertThisInitialized(_this), "validationFunctionsData", []);

    _defineProperty(_assertThisInitialized(_this), "validationAsyncData", {});

    _defineProperty(_assertThisInitialized(_this), "files", void 0);

    _defineProperty(_assertThisInitialized(_this), "sync", (0, _mobx.action)(function (e) {
      var v = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      _this.$changed = true;

      var $get = function $get($) {
        return (0, _utils.$isBool)($, _this.value) ? $.target.checked : $.target.value;
      }; // assume "v" or "e" are the values


      if ((0, _isNil2["default"])(e) || (0, _isNil2["default"])(e.target)) {
        if (!(0, _isNil2["default"])(v) && !(0, _isNil2["default"])(v.target)) {
          v = $get(v); // eslint-disable-line
        }

        _this.value = (0, _utils.$try)(e, v);
        return;
      }

      if (!(0, _isNil2["default"])(e.target)) {
        _this.value = $get(e);
        return;
      }

      _this.value = e;
    }));

    _defineProperty(_assertThisInitialized(_this), "onChange", function () {
      var _this2;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _this.type === 'file' ? (_this2 = _this).onDrop.apply(_this2, args) : _this.execHandler('onChange', args, _this.sync);
    });

    _defineProperty(_assertThisInitialized(_this), "onToggle", function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _this.execHandler('onToggle', args, _this.sync);
    });

    _defineProperty(_assertThisInitialized(_this), "onBlur", function () {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return _this.execHandler('onBlur', args, (0, _mobx.action)(function () {
        if (!_this.$blurred) {
          _this.$blurred = true;
        }

        _this.$focused = false;
      }));
    });

    _defineProperty(_assertThisInitialized(_this), "onFocus", function () {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return _this.execHandler('onFocus', args, (0, _mobx.action)(function () {
        _this.$focused = true;
        _this.$touched = true;
      }));
    });

    _defineProperty(_assertThisInitialized(_this), "onDrop", function () {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      return _this.execHandler('onDrop', args, (0, _mobx.action)(function () {
        var e = args[0];
        var files = null;

        if ((0, _utils.$isEvent)(e) && (0, _utils.$hasFiles)(e)) {
          files = (0, _map2["default"])(e.target.files);
        }

        _this.files = files || args;
      }));
    });

    (0, _mobx.makeObservable)(_assertThisInitialized(_this), {
      $options: _mobx.observable,
      $value: _mobx.observable,
      $type: _mobx.observable,
      $label: _mobx.observable,
      $placeholder: _mobx.observable,
      $default: _mobx.observable,
      $initial: _mobx.observable,
      $bindings: _mobx.observable,
      $extra: _mobx.observable,
      $related: _mobx.observable,
      $validatedWith: _mobx.observable,
      $validators: _mobx.observable,
      $rules: _mobx.observable,
      $disabled: _mobx.observable,
      $focused: _mobx.observable,
      $touched: _mobx.observable,
      $changed: _mobx.observable,
      $blurred: _mobx.observable,
      $deleted: _mobx.observable,
      $clearing: _mobx.observable,
      $resetting: _mobx.observable,
      autoFocus: _mobx.observable,
      showError: _mobx.observable,
      errorSync: _mobx.observable,
      errorAsync: _mobx.observable,
      validationErrorStack: _mobx.observable,
      validationFunctionsData: _mobx.observable,
      validationAsyncData: _mobx.observable,
      files: _mobx.observable,
      checkValidationErrors: _mobx.computed,
      checked: _mobx.computed,
      value: _mobx.computed,
      initial: _mobx.computed,
      "default": _mobx.computed,
      actionRunning: _mobx.computed,
      type: _mobx.computed,
      label: _mobx.computed,
      placeholder: _mobx.computed,
      extra: _mobx.computed,
      options: _mobx.computed,
      bindings: _mobx.computed,
      related: _mobx.computed,
      disabled: _mobx.computed,
      rules: _mobx.computed,
      validators: _mobx.computed,
      validatedValue: _mobx.computed,
      error: _mobx.computed,
      hasError: _mobx.computed,
      isValid: _mobx.computed,
      isDefault: _mobx.computed,
      isDirty: _mobx.computed,
      isPristine: _mobx.computed,
      isEmpty: _mobx.computed,
      resetting: _mobx.computed,
      clearing: _mobx.computed,
      focused: _mobx.computed,
      blurred: _mobx.computed,
      touched: _mobx.computed,
      changed: _mobx.computed,
      deleted: _mobx.computed,
      setupField: _mobx.action,
      initNestedFields: _mobx.action,
      invalidate: _mobx.action,
      setValidationAsyncData: _mobx.action,
      resetValidation: _mobx.action,
      clear: _mobx.action,
      reset: _mobx.action,
      focus: _mobx.action,
      showErrors: _mobx.action,
      showAsyncErrors: _mobx.action
    });
    _this.state = state;

    _this.setupField(key, path, data, props, update);

    _this.checkValidationPlugins();

    _this.initNestedFields(data, update);

    _this.incremental = _this.hasIncrementalKeys !== 0;
    _this.debouncedValidation = (0, _debounce2["default"])(_this.validate, _this.state.options.get('validationDebounceWait', _assertThisInitialized(_this)), _this.state.options.get('validationDebounceOptions', _assertThisInitialized(_this)));

    _this.observeValidationOnBlur();

    _this.observeValidationOnChange();

    _this.initMOBXEvent('observers');

    _this.initMOBXEvent('interceptors');

    _this.execHook('onInit');

    return _this;
  }
  /* ------------------------------------------------------------------ */

  /* COMPUTED */


  _createClass(Field, [{
    key: "setupField",
    value: function setupField($key, $path, $data, $props, update) {
      this.key = $key;
      this.path = $path;
      this.id = this.state.options.get('uniqueId').apply(this, [this]);
      var struct = this.state.struct();
      var structPath = (0, _utils.pathToStruct)(this.path);
      var isEmptyArray = Array.isArray(struct) ? struct.filter(function (s) {
        return s.startsWith(structPath);
      }).find(function (s) {
        return s.substr(structPath.length, 2) === '[]';
      }) : Array.isArray((0, _get2["default"])(struct, this.path));
      var $type = $props.$type,
          $input = $props.$input,
          $output = $props.$output; // eslint-disable-next-line
      // if (_.isNil($data)) $data = '';

      if ((0, _isPlainObject2["default"])($data)) {
        var type = $data.type,
            input = $data.input,
            output = $data.output;
        this.name = (0, _toString2["default"])($data.name || $key);
        this.$type = $type || type || 'text';
        this.$input = (0, _utils.$try)($input, input, this.$input);
        this.$output = (0, _utils.$try)($output, output, this.$output);
        this.$value = (0, _parser.parseInput)(this.$input, {
          isEmptyArray: isEmptyArray,
          type: this.type,
          unified: $data.value,
          separated: $props.$value,
          fallback: $props.$initial
        });
        this.$initial = (0, _parser.parseInput)(this.$input, {
          nullable: true,
          isEmptyArray: isEmptyArray,
          type: this.type,
          unified: $data.initial,
          separated: $props.$initial,
          fallback: this.$value
        });
        this.$default = setupDefaultProp(this, $data, $props, update, {
          isEmptyArray: isEmptyArray
        });
        setupFieldProps(this, $props, $data);
        return;
      }
      /* The field IS the value here */


      this.name = (0, _toString2["default"])($key);
      this.$type = $type || 'text';
      this.$input = (0, _utils.$try)($input, this.$input);
      this.$output = (0, _utils.$try)($output, this.$output);
      this.$value = (0, _parser.parseInput)(this.$input, {
        isEmptyArray: isEmptyArray,
        type: this.type,
        unified: $data,
        separated: $props.$value
      });
      this.$initial = (0, _parser.parseInput)(this.$input, {
        nullable: true,
        isEmptyArray: isEmptyArray,
        type: this.type,
        unified: $data,
        separated: $props.$initial,
        fallback: this.$value
      });
      this.$default = setupDefaultProp(this, $data, $props, update, {
        isEmptyArray: isEmptyArray
      });
      setupFieldProps(this, $props, $data);
    }
  }, {
    key: "getComputedProp",
    value: function getComputedProp(key) {
      var _this3 = this;

      if (this.incremental || this.hasNestedFields) {
        var $val = key === 'value' ? this.get(key, false) : (0, _mobx.untracked)(function () {
          return _this3.get(key, false);
        });
        return !(0, _isEmpty2["default"])($val) ? $val : [];
      }

      var val = this["$".concat(key)];

      if ((0, _isArray2["default"])(val) || (0, _mobx.isObservableArray)(val)) {
        return [].slice.call(val);
      }

      return (0, _mobx.toJS)(val);
    }
  }, {
    key: "checkValidationPlugins",
    value: function checkValidationPlugins() {
      var drivers = this.state.form.validator.drivers;
      var form = this.state.form.name ? "".concat(this.state.form.name, "/") : '';

      if ((0, _isNil2["default"])(drivers.dvr) && !(0, _isNil2["default"])(this.rules)) {
        throw new Error("The DVR validation rules are defined but no DVR plugin provided. Field: \"".concat(form + this.path, "\"."));
      }

      if ((0, _isNil2["default"])(drivers.vjf) && !(0, _isNil2["default"])(this.validators)) {
        throw new Error("The VJF validators functions are defined but no VJF plugin provided. Field: \"".concat(form + this.path, "\"."));
      }
    }
  }, {
    key: "initNestedFields",
    value: function initNestedFields(field, update) {
      var fields = (0, _isNil2["default"])(field) ? null : field.fields;

      if ((0, _isArray2["default"])(fields) && !(0, _isEmpty2["default"])(fields)) {
        this.hasInitialNestedFields = true;
      }

      this.initFields({
        fields: fields
      }, update);

      if (!update && (0, _isArray2["default"])(fields) && (0, _isEmpty2["default"])(fields)) {
        if ((0, _isArray2["default"])(this.value) && !(0, _isEmpty2["default"])(this.value)) {
          this.hasInitialNestedFields = true;
          this.initFields({
            fields: fields,
            values: this.value
          }, update);
        }
      }
    }
  }, {
    key: "invalidate",
    value: function invalidate(message) {
      var async = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (async === true) {
        this.errorAsync = message;
        return;
      }

      if ((0, _isArray2["default"])(message)) {
        this.validationErrorStack = message;
        this.showErrors(true);
        return;
      }

      this.validationErrorStack.unshift(message);
      this.showErrors(true);
    }
  }, {
    key: "setValidationAsyncData",
    value: function setValidationAsyncData() {
      var valid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      this.validationAsyncData = {
        valid: valid,
        message: message
      };
    }
  }, {
    key: "resetValidation",
    value: function resetValidation() {
      var deep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      this.showError = true;
      this.errorSync = null;
      this.errorAsync = null;
      this.validationAsyncData = {};
      this.validationFunctionsData = [];
      this.validationErrorStack = [];
      if (deep) this.each(function (field) {
        return field.resetValidation();
      });
    }
  }, {
    key: "clear",
    value: function clear() {
      var deep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.$clearing = true;
      this.$touched = false;
      this.$changed = false;
      this.$blurred = false;
      this.$value = (0, _parser.defaultClearValue)({
        value: this.$value
      });
      this.files = undefined;
      if (deep) this.each(function (field) {
        return field.clear(true);
      });
      this.validate({
        showErrors: this.state.options.get('showErrorsOnClear', this)
      });
    }
  }, {
    key: "reset",
    value: function reset() {
      var deep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.$resetting = true;
      this.$touched = false;
      this.$changed = false;
      this.$blurred = false;
      var useDefaultValue = this.$default !== this.$initial;
      if (useDefaultValue) this.value = this.$default;
      if (!useDefaultValue) this.value = this.$initial;
      this.files = undefined;
      if (deep) this.each(function (field) {
        return field.reset(true);
      });
      this.validate({
        showErrors: this.state.options.get('showErrorsOnReset', this)
      });
    }
  }, {
    key: "focus",
    value: function focus() {
      // eslint-disable-next-line
      this.state.form.each(function (field) {
        return field.autoFocus = false;
      });
      this.autoFocus = true;
    }
  }, {
    key: "showErrors",
    value: function showErrors() {
      var show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.showError = show;
      this.errorSync = (0, _head2["default"])(this.validationErrorStack);
      this.each(function (field) {
        return field.showErrors(show);
      });
    }
  }, {
    key: "showAsyncErrors",
    value: function showAsyncErrors() {
      if (this.validationAsyncData.valid === false) {
        this.errorAsync = this.validationAsyncData.message;
        return;
      }

      this.errorAsync = null;
    }
  }, {
    key: "observeValidationOnBlur",
    value: function observeValidationOnBlur() {
      var _this4 = this;

      var opt = this.state.options;

      if (opt.get('validateOnBlur', this)) {
        this.disposeValidationOnBlur = (0, _mobx.observe)(this, '$focused', function (change) {
          return change.newValue === false && _this4.debouncedValidation({
            showErrors: opt.get('showErrorsOnBlur', _this4)
          });
        });
      }
    }
  }, {
    key: "observeValidationOnChange",
    value: function observeValidationOnChange() {
      var _this5 = this;

      var opt = this.state.options;

      if (opt.get('validateOnChange', this)) {
        this.disposeValidationOnChange = (0, _mobx.observe)(this, '$value', function () {
          return !_this5.actionRunning && _this5.debouncedValidation({
            showErrors: opt.get('showErrorsOnChange', _this5)
          });
        });
      } else if (opt.get('validateOnChangeAfterInitialBlur', this) || opt.get('validateOnChangeAfterSubmit', this)) {
        this.disposeValidationOnChange = (0, _mobx.observe)(this, '$value', function () {
          return !_this5.actionRunning && (opt.get('validateOnChangeAfterInitialBlur', _this5) && _this5.blurred || opt.get('validateOnChangeAfterSubmit', _this5) && _this5.state.form.submitted) && _this5.debouncedValidation({
            showErrors: opt.get('showErrorsOnChange', _this5)
          });
        });
      }
    }
  }, {
    key: "initMOBXEvent",
    value: function initMOBXEvent(type) {
      if (!(0, _isArray2["default"])(this["$".concat(type)])) return;
      var fn;
      if (type === 'observers') fn = this.observe;
      if (type === 'interceptors') fn = this.intercept;
      this["$".concat(type)].map(function (obj) {
        return fn((0, _omit2["default"])(obj, 'path'));
      });
    }
  }, {
    key: "bind",
    value: function bind() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.state.bindings.load(this, this.bindings, props);
    }
  }, {
    key: "checkValidationErrors",
    get: function get() {
      return this.validationAsyncData.valid === false && !(0, _isEmpty2["default"])(this.validationAsyncData) || !(0, _isEmpty2["default"])(this.validationErrorStack) || (0, _isString2["default"])(this.errorAsync) || (0, _isString2["default"])(this.errorSync);
    }
  }, {
    key: "checked",
    get: function get() {
      return this.type === 'checkbox' ? this.value : undefined;
    }
  }, {
    key: "value",
    get: function get() {
      return this.getComputedProp('value');
    },
    set: function set(newVal) {
      if (this.$value === newVal) return; // handle numbers

      if (this.state.options.get('autoParseNumbers', this) === true) {
        if ((0, _isNumber2["default"])(this.$initial)) {
          if (new RegExp('^-?\\d+(,\\d+)*(\\.\\d+([eE]\\d+)?)?$', 'g').exec(newVal)) {
            this.$value = (0, _toNumber2["default"])(newVal);
            return;
          }
        }
      } // handle parse value


      this.$value = newVal;
    }
  }, {
    key: "initial",
    get: function get() {
      return this.$initial ? (0, _mobx.toJS)(this.$initial) : this.getComputedProp('initial');
    },
    set: function set(val) {
      this.$initial = (0, _parser.parseInput)(this.$input, {
        separated: val
      });
    }
  }, {
    key: "default",
    get: function get() {
      return this.$default ? (0, _mobx.toJS)(this.$default) : this.getComputedProp('default');
    },
    set: function set(val) {
      this.$default = (0, _parser.parseInput)(this.$input, {
        separated: val
      });
    }
  }, {
    key: "actionRunning",
    get: function get() {
      return this.submitting || this.clearing || this.resetting;
    }
  }, {
    key: "type",
    get: function get() {
      return (0, _mobx.toJS)(this.$type);
    }
  }, {
    key: "label",
    get: function get() {
      return (0, _mobx.toJS)(this.$label);
    }
  }, {
    key: "placeholder",
    get: function get() {
      return (0, _mobx.toJS)(this.$placeholder);
    }
  }, {
    key: "extra",
    get: function get() {
      return (0, _mobx.toJS)(this.$extra);
    }
  }, {
    key: "options",
    get: function get() {
      return (0, _mobx.toJS)(this.$options);
    }
  }, {
    key: "bindings",
    get: function get() {
      return (0, _mobx.toJS)(this.$bindings);
    }
  }, {
    key: "related",
    get: function get() {
      return (0, _mobx.toJS)(this.$related);
    }
  }, {
    key: "disabled",
    get: function get() {
      return (0, _mobx.toJS)(this.$disabled);
    }
  }, {
    key: "rules",
    get: function get() {
      return (0, _mobx.toJS)(this.$rules);
    }
  }, {
    key: "validators",
    get: function get() {
      return (0, _mobx.toJS)(this.$validators);
    }
  }, {
    key: "validatedValue",
    get: function get() {
      return (0, _parser.parseCheckOutput)(this, this.$validatedWith);
    }
  }, {
    key: "error",
    get: function get() {
      if (this.showError === false) return null;
      return this.errorAsync || this.errorSync || null;
    }
  }, {
    key: "hasError",
    get: function get() {
      return this.checkValidationErrors || this.check('hasError', true);
    }
  }, {
    key: "isValid",
    get: function get() {
      return !this.checkValidationErrors && this.check('isValid', true);
    }
  }, {
    key: "isDefault",
    get: function get() {
      return !(0, _isNil2["default"])(this["default"]) && (0, _isEqual2["default"])(this["default"], this.value);
    }
  }, {
    key: "isDirty",
    get: function get() {
      return !(0, _isUndefined2["default"])(this.initial) && !(0, _isEqual2["default"])(this.initial, this.value);
    }
  }, {
    key: "isPristine",
    get: function get() {
      return !(0, _isNil2["default"])(this.initial) && (0, _isEqual2["default"])(this.initial, this.value);
    }
  }, {
    key: "isEmpty",
    get: function get() {
      if (this.hasNestedFields) return this.check('isEmpty', true);
      if ((0, _isBoolean2["default"])(this.value)) return !!this.$value;
      if ((0, _isNumber2["default"])(this.value)) return false;
      if ((0, _isDate2["default"])(this.value)) return false;
      return (0, _isEmpty2["default"])(this.value);
    }
  }, {
    key: "resetting",
    get: function get() {
      return this.hasNestedFields ? this.check('resetting', true) : this.$resetting;
    }
  }, {
    key: "clearing",
    get: function get() {
      return this.hasNestedFields ? this.check('clearing', true) : this.$clearing;
    }
  }, {
    key: "focused",
    get: function get() {
      return this.hasNestedFields ? this.check('focused', true) : this.$focused;
    }
  }, {
    key: "blurred",
    get: function get() {
      return this.hasNestedFields ? this.check('blurred', true) : this.$blurred;
    }
  }, {
    key: "touched",
    get: function get() {
      return this.hasNestedFields ? this.check('touched', true) : this.$touched;
    }
  }, {
    key: "changed",
    get: function get() {
      return this.hasNestedFields ? this.check('changed', true) : this.$changed;
    }
  }, {
    key: "deleted",
    get: function get() {
      return this.hasNestedFields ? this.check('deleted', true) : this.$deleted;
    }
    /* ------------------------------------------------------------------ */

    /* EVENTS HANDLERS */

  }]);

  return Field;
}(_Base2["default"]);

exports["default"] = Field;
;
module.exports = exports["default"];